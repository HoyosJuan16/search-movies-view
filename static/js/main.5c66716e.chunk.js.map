{"version":3,"sources":["components/Title.js","components/Legend.js","components/FormSearch.js","components/Search.js","components/Movie.js","components/NoResults.js","components/Movies.js","pages/Home.js","components/BackToHome.js","pages/Movie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Title","title","to","className","Legend","children","FormSearch","onResults","useState","movie","setMovie","action","method","onSubmit","e","preventDefault","fetch","then","res","json","results","Search","console","log","target","reset","type","placeholder","onChange","actMovie","value","isSearch","act","Movie","id","poster","year","src","alt","NoResults","Movies","dataMovies","length","map","imdbID","key","Poster","Year","Home","setDataMovies","setisSearch","BackToHome","useParams","newMovie","Genre","Runtime","Actors","Plot","NotFound","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c66716e.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../css/Title.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Title = ({title}) => {\r\n  return(\r\n    <Link to='/' className='anchor-title'>\r\n      <h1 className='title'>{title}</h1>\r\n    </Link>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport '../css/Legend.css'\r\n\r\nexport const Legend = ({children}) => {\r\n  return (\r\n    <p className='small-text'>\r\n      {children}\r\n    </p>\r\n  )\r\n}","import React, {useState} from 'react'\r\n\r\nimport '../css/FormSearch.css'\r\n\r\nconst API_KEY = '9e7e112b'\r\n\r\nexport const FormSearch = ({onResults}) => {\r\n\r\n  const [movie,setMovie] = useState('')\r\n  \r\n  const actMovie = (e) => {\r\n    console.log(e)\r\n    setMovie(e)\r\n  }\r\n\r\n  const searchMovie = () => {\r\n    fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${movie}`)\r\n      .then(res => res.json())\r\n        .then(results => {\r\n          const { Search = [] } = results\r\n          console.log({Search})\r\n          onResults(Search)\r\n        })\r\n  }\r\n\r\n  return (\r\n    <form \r\n      action='/' \r\n      className='form'\r\n      method='POST' \r\n      onSubmit={(e)=>{\r\n        e.preventDefault()\r\n        searchMovie(e)\r\n        e.target.reset()\r\n      }}\r\n    >\r\n      <input\r\n        type='text'\r\n        className='input-text'\r\n        placeholder='Find a movie'\r\n        onChange={(e)=>{\r\n          actMovie(e.target.value)\r\n        }}\r\n      />\r\n      <input\r\n        type='submit'\r\n        className='input-submit'\r\n        value='Search'\r\n        />\r\n    </form>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport '../css/Search.css'\r\n\r\nimport { Title } from './Title'\r\nimport { Legend } from './Legend'\r\nimport { FormSearch } from './FormSearch'\r\n\r\nexport const Search = ({isSearch, act}) => {\r\n  return (\r\n    <div\r\n      className={isSearch ? 'box-search top' : 'box-search center'}\r\n    >\r\n\r\n      <Title\r\n        title='Search Movies'\r\n        />\r\n      <FormSearch\r\n        onResults={act}\r\n        />\r\n      <Legend>Use the searcher to find a movie</Legend>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Movie = ({id,title,poster,year}) => {\r\n  return(\r\n  <Link \r\n    to={`/movie/${id}`}\r\n    className='movie'\r\n    >\r\n    <div className='movie-poster'>\r\n      <img src={poster} alt={title} />\r\n    </div>\r\n    <h3 className='movie-title'>{title}</h3>\r\n    <p className='movie-year'>Year: {year}</p>\r\n  </Link>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport '../css/NoResults.css'\r\n\r\nexport const NoResults = () => {\r\n  return (\r\n    <h3 className='text-result'>No se encontro resultados</h3>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport '../css/Movies.css'\r\n\r\nimport { Movie } from './Movie'\r\nimport { NoResults } from './NoResults'\r\n\r\nexport const Movies = ({dataMovies}) => {\r\n  const listMovies = () => {\r\n    return(\r\n      dataMovies.length > 0\r\n      ? dataMovies.map( movie => {\r\n        return (\r\n          <Movie \r\n            id={movie.imdbID}\r\n            key={movie.imdbID}\r\n            title={movie.Title}\r\n            poster={movie.Poster}\r\n            year={movie.Year}\r\n          />\r\n        )\r\n      })\r\n      : <NoResults />\r\n    )\r\n  }\r\n  return (\r\n    <div className='movies'>\r\n      <div className='container container-movies'>\r\n        {listMovies()}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\n\r\nimport '../css/Home.css'\r\n\r\nimport { Search } from '../components/Search'\r\nimport { Movies } from '../components/Movies'\r\n\r\nexport const Home = () => {\r\n\r\n  const [dataMovies, setDataMovies] = useState([])\r\n  const [isSearch, setisSearch] = useState(false)\r\n\r\n  const act = (results) => {\r\n    setDataMovies(results)\r\n    setisSearch(true)\r\n  }\r\n\r\n  return (\r\n    <div className='home'>\r\n      <Search\r\n        isSearch={isSearch}\r\n        act={act}\r\n      />\r\n      {\r\n        isSearch && \r\n        <Movies\r\n          dataMovies={dataMovies}\r\n         />\r\n      }\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const BackToHome = () => {\r\n  return (\r\n    <Link\r\n      to='/'\r\n      className='input-submit back-to-home'\r\n    >\r\n      Back to home\r\n    </Link>\r\n  )\r\n}","import React , { useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport '../css/Movie.css'\r\n\r\nimport { BackToHome } from '../components/BackToHome'\r\n\r\nconst API_KEY = '9e7e112b'\r\n\r\nexport const Movie = () => {\r\n\r\n  const id = useParams().id\r\n  const [movie, setMovie] = useState({})\r\n\r\n\r\n  const data = () => {\r\n    fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\r\n      .then(res => res.json())\r\n        .then(newMovie => setMovie(newMovie))\r\n  }\r\n\r\n  return (\r\n    <div className='movie-page'>\r\n      <div className='container container-movie-page'>\r\n        {data()}\r\n        <div className='movie-page-poster'>\r\n          <img src={movie.Poster} alt={movie.Title} />\r\n        </div>\r\n        <h2 className='movie-page-title'>{movie.Title}</h2>\r\n        <p className='movie-page-genre'><b>Genre: </b>{(movie.Genre)}</p>\r\n        <p className='movie-page-year'><b>Year: </b>{(movie.Year)}</p>\r\n        <p className='movie-page-duration'><b>Runtime: </b>{movie.Runtime}</p>\r\n        <p className='movie-page-actors'><b>Actors: </b>{movie.Actors}</p>\r\n        <p className='movie-page-plot'><b>Plot: </b>{movie.Plot}</p>\r\n        <BackToHome/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport const NotFound = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { Home } from './pages/Home'\nimport { Movie } from './pages/Movie'\nimport { NotFound } from './pages/NotFound'\n\nexport const App = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={ Home }/>\n      <Route exact path='/movie/:id' component={ Movie }/>\n      <Route component={ NotFound } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}